{"version":3,"sources":["Input.js","App.js","AppClass.js","serviceWorker.js","index.js"],"names":["Input","props","className","onChange","id","type","placeholder","value","errorMessage","App","AppClass","handelInputChange","e","setState","todo","target","handelSubmit","preventDefault","alert","state","isValid","onSubmit","this","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAEe,SAASA,EAAMC,GAC1B,OACI,yBAAKC,UAAU,cACX,2BAAOC,SAAUF,EAAME,SAAUC,GAAIH,EAAMG,GAAIC,KAAOJ,EAAMI,KAC5DC,YAAaL,EAAMK,YAAaC,MAAON,EAAMM,QAC9C,yBAAKL,UAAU,gBAAgBD,EAAMO,e,KCejCC,I,mCClBMC,E,YACjB,WAAYT,GAAO,IAAD,8BACd,4CAAMA,KAKVU,kBAAoB,SAACC,GAClB,EAAKC,SAAS,CACVC,KAAMF,EAAEG,OAAOR,SARJ,EAWlBS,aAAe,SAACJ,GACZA,EAAEK,iBACFC,MAAM,gBAAD,OAAiB,EAAKC,MAAML,QAbnB,EAelBM,QAAU,WACN,MAAsB,KAAnB,EAAKD,MAAML,MAdd,EAAKK,MAAO,CACRL,KAAK,IAHK,E,sEAsBd,OACI,yBAAKZ,UAAU,OACX,iEACA,0BAAMmB,SAAUC,KAAKN,cACjB,kBAAChB,EAAD,CAAOG,SAAUmB,KAAKX,kBAAmBP,GAAG,OAAOC,KAAK,OACxDG,aAAcc,KAAKF,UAAY,GAAK,yBACpCd,YAAY,kBAAkBC,MAAOe,KAAKH,MAAML,OAGhD,4BAAQZ,UAAU,oBAAoBqB,UAAWD,KAAKF,UAAYf,KAAK,UAAvE,gB,GAhCkBmB,a,MCQlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SDuHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c6425cc1.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Input(props) {\n    return (\n        <div className=\"form-group\">\n            <input onChange={props.onChange} id={props.id} type= {props.type} \n            placeholder={props.placeholder} value={props.value}/>\n           <div className=\"errorMessage\">{props.errorMessage}</div>\n        </div>\n    )\n}\n","import React from 'react';\nimport Input from './Input';\nimport './App.css';\n\n\nconst handleSubmit= (e)=>{\n  e.preventDefault();\n  //alert('submited')\n  console.log(e.target['todo'].value);\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2> Control Component in React </h2>\n      <form onSubmit={handleSubmit} >\n        <Input/>\n        <button className=\"btn\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport Input from './Input';\nimport './App.css';\n\nexport default class AppClass extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            todo:\"\",\n        }\n    }\n    handelInputChange = (e)=>{\n       this.setState({\n           todo: e.target.value,\n       }) \n    }\n    handelSubmit = (e)=> {\n        e.preventDefault();\n        alert(`the task is: ${this.state.todo}`);\n    }\n    isValid = ()=>{\n        if(this.state.todo ===''){\n            return false;\n        }\n        return true;\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <h2> Controlled Component whit React </h2>\n                <form onSubmit={this.handelSubmit}>\n                    <Input onChange={this.handelInputChange} id=\"todo\" type=\"text\" \n                    errorMessage={this.isValid() ? '' : 'This field is required'}\n                    placeholder=\"write some text\" value={this.state.todo} />\n                  \n                    {/* <Input type=\"submit\" value=\"Submit the form\"/> */}\n                    <button className=\"btn btn-secondary\" disabled={!this.isValid()}  type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppClass from './AppClass';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppClass />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}